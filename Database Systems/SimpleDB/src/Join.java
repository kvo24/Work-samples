package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate p;
    private DbIterator child1;
    private DbIterator child2;
    private DbIterator[] children;
    private boolean found = false;
    private Tuple t1;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
        this.children = new DbIterator[2];
        this.children[0] = this.child1;
        this.children[1] = this.child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return this.child1.getTupleDesc().getFieldName(this.p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return this.child2.getTupleDesc().getFieldName(this.p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(this.child1.getTupleDesc(), this.child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        this.child1.open();
        this.child2.open();
        super.open();
    }

    public void close() {
        // some code goes here
        this.child1.close();
        this.child2.close();
        super.close();
    }

    // Rewind the stream back to the start. 
    // This could be necessary for implementing e.g. nested loop joins.
    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        this.child1.rewind();
        this.child2.rewind();
    }

    private Tuple joinTuples(Tuple t1, Tuple t2) {
        
        Tuple joinedTuple = new Tuple(this.getTupleDesc());

        for (int k = 0; k < t1.getTupleDesc().numFields(); k++) {
            joinedTuple.setField(k, t1.getField(k));
        }

        for (int k = 0; k < t2.getTupleDesc().numFields(); k++) {
            joinedTuple.setField(k + t1.getTupleDesc().numFields(), t2.getField(k));
        }

        return joinedTuple;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here

        if (found) {

            while (child2.hasNext()) {

                Tuple t2 = child2.next();

                if (p.filter(t1, t2)) {

                    return joinTuples(t1, t2);

                }
            }

            child2.rewind();
            found = false;

        }

        while (child1.hasNext()) {

            t1 = child1.next();

            while (child2.hasNext()) {

                Tuple t2 = child2.next();

                if (p.filter(t1, t2)) {

                    found = true;
                    return joinTuples(t1, t2);

                }

            }

            child2.rewind();

        }

        return null;

        // while (this.child1.hasNext()) {
        //     if (!this.child2.hasNext()) {
        //         t1 = this.child1.next();
        //     }
        //     if (found == false) { 
        //         t1 = this.child1.next();
        //     }
        //     System.out.println("t1 = " + t1.toString());
        //     while (this.child2.hasNext()) {
        //         Tuple t2 = this.child2.next();
        //         System.out.println("considered t2 = " + t2.toString());
        //         if (this.p.filter(t1, t2)) {
        //             System.out.println("filtered t2 = " + t2.toString());
        //             found = true;
        //             return joinTuples(t1, t2);
        //         }
        //     }
        //     this.child2.rewind();
        // }
        // return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return this.children;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        this.children = children;
    }

}
